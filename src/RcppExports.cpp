// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <Rcpp.h>

using namespace Rcpp;

#ifdef RCPP_USE_GLOBAL_ROSTREAM
Rcpp::Rostream<true>&  Rcpp::Rcout = Rcpp::Rcpp_cout_get();
Rcpp::Rostream<false>& Rcpp::Rcerr = Rcpp::Rcpp_cerr_get();
#endif

// DBIMonitor__new
SEXP DBIMonitor__new(const std::string& ends, const std::string& releases, const std::string& attributes, const std::string& resources, Function& dbClear, Function& dbAppend);
RcppExport SEXP _simmer_mon_DBIMonitor__new(SEXP endsSEXP, SEXP releasesSEXP, SEXP attributesSEXP, SEXP resourcesSEXP, SEXP dbClearSEXP, SEXP dbAppendSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const std::string& >::type ends(endsSEXP);
    Rcpp::traits::input_parameter< const std::string& >::type releases(releasesSEXP);
    Rcpp::traits::input_parameter< const std::string& >::type attributes(attributesSEXP);
    Rcpp::traits::input_parameter< const std::string& >::type resources(resourcesSEXP);
    Rcpp::traits::input_parameter< Function& >::type dbClear(dbClearSEXP);
    Rcpp::traits::input_parameter< Function& >::type dbAppend(dbAppendSEXP);
    rcpp_result_gen = Rcpp::wrap(DBIMonitor__new(ends, releases, attributes, resources, dbClear, dbAppend));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_simmer_mon_DBIMonitor__new", (DL_FUNC) &_simmer_mon_DBIMonitor__new, 6},
    {NULL, NULL, 0}
};

RcppExport void R_init_simmer_mon(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
